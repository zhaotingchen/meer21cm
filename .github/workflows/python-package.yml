# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]
        os: ["ubuntu-latest", "macos-latest"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get Miniconda
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh
        elif [ "$RUNNER_OS" == "macOS" ]; then
          curl -o $HOME/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh
        else
          echo "Unsupported OS: $RUNNER_OS"
          exit 1
        fi
        bash $HOME/miniconda.sh -b -p $HOME/miniconda
    - name: Setup Environment
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        conda create --name=${ENV_NAME}  python=$PYTHON --quiet
        source activate ${ENV_NAME}
    - name: Install dependencies
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate ${ENV_NAME}
        pip install --upgrade "pip<24.1"
        conda install -c anaconda 'cython<3.0'
        pip install "numpy<2.0"
        if [ "$RUNNER_OS" == 'Linux' ]; then
            sudo apt install libopenmpi-dev
            # magic fix of ld issue
            rm /home/runner/miniconda/envs/tests/compiler_compat/ld
            conda install -c conda-forge mpi4py openmpi
        elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install openmpi
            brew install hdf5
            brew install c-blosc
            export HDF5_DIR=/opt/homebrew/opt/hdf5
            export BLOSC_DIR=/opt/homebrew/opt/c-blosc
            pip install "mpi4py<4.0"
            pip install mpsort==0.1.18
        fi
        pip install git+https://github.com/rainwoodman/pfft-python.git
        pip install ".[full]"
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate ${ENV_NAME}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=F821
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        source activate ${ENV_NAME}
        pytest --cov=meer21cm tests/ --cov-report xml:./coverage.xml
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
